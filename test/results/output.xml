<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.8.5 on linux)" generated="20200913 17:55:29.674" rpa="false">
<suite id="s1" name="Resources" source="/test/resources">
<suite id="s1-s1" name="Package" source="/test/resources/package">
<suite id="s1-s1-s1" name="Setup" source="/test/resources/package/setup.robot">
<kw name="Set Cwd" library="LinkDotfiles" type="setup">
<doc>Changes the current working directory, and returns the previous one.</doc>
<arguments>
<arg>/test/resources/package</arg>
</arguments>
<status status="PASS" starttime="20200913 17:55:29.776" endtime="20200913 17:55:29.778"></status>
</kw>
<test id="s1-s1-s1-t1" name="Test Deep Link">
<kw name="Deep Link" library="DeployDotfiles">
<kw name="Set Ignore" library="LinkDotfiles">
<arguments>
<arg>${SETUP}</arg>
</arguments>
<status status="PASS" starttime="20200913 17:55:29.780" endtime="20200913 17:55:29.781"></status>
</kw>
<kw name="Deep Link" library="LinkDotfiles">
<doc>For each path in paths, recursively searches for all files contained in each subdirectory, and creates a
symlink in target contained in the file's subdirectories that points to each file.</doc>
<status status="PASS" starttime="20200913 17:55:29.781" endtime="20200913 17:55:29.784"></status>
</kw>
<status status="PASS" starttime="20200913 17:55:29.779" endtime="20200913 17:55:29.784"></status>
</kw>
<kw name="Link Should Exist" library="test">
<arguments>
<arg>/test/resources/package${/}file</arg>
<arg>${TARGET}${/}file</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${dest}</arg>
</arguments>
<msg timestamp="20200913 17:55:29.786" level="INFO" html="yes">File '&lt;a href="file:///test/resources/package/file"&gt;/test/resources/package/file&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20200913 17:55:29.785" endtime="20200913 17:55:29.786"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${link}</arg>
</arguments>
<msg timestamp="20200913 17:55:29.786" level="INFO" html="yes">File '&lt;a href="file:///root/file"&gt;/root/file&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20200913 17:55:29.786" endtime="20200913 17:55:29.787"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>readlink</arg>
<arg>${link}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200913 17:55:29.787" level="INFO">Starting process:
readlink /root/file</msg>
<msg timestamp="20200913 17:55:29.792" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200913 17:55:29.793" level="INFO">Process completed.</msg>
<msg timestamp="20200913 17:55:29.793" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20200913 17:55:29.787" endtime="20200913 17:55:29.793"></status>
</kw>
<kw name="Command Should Succeed" library="test">
<arguments>
<arg>${result}</arg>
</arguments>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<msg timestamp="20200913 17:55:29.796" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200913 17:55:29.795" endtime="20200913 17:55:29.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200913 17:55:29.797" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200913 17:55:29.796" endtime="20200913 17:55:29.797"></status>
</kw>
<status status="PASS" starttime="20200913 17:55:29.794" endtime="20200913 17:55:29.797"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>${dest}</arg>
</arguments>
<status status="PASS" starttime="20200913 17:55:29.797" endtime="20200913 17:55:29.798"></status>
</kw>
<status status="PASS" starttime="20200913 17:55:29.784" endtime="20200913 17:55:29.798"></status>
</kw>
<kw name="Link Should Exist" library="test">
<arguments>
<arg>/test/resources/package${/}dir${/}dir_file</arg>
<arg>${TARGET}${/}dir${/}dir_file</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${dest}</arg>
</arguments>
<msg timestamp="20200913 17:55:29.801" level="INFO" html="yes">File '&lt;a href="file:///test/resources/package/dir/dir_file"&gt;/test/resources/package/dir/dir_file&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20200913 17:55:29.800" endtime="20200913 17:55:29.801"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${link}</arg>
</arguments>
<msg timestamp="20200913 17:55:29.802" level="INFO" html="yes">File '&lt;a href="file:///root/dir/dir_file"&gt;/root/dir/dir_file&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20200913 17:55:29.801" endtime="20200913 17:55:29.802"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>readlink</arg>
<arg>${link}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200913 17:55:29.803" level="INFO">Starting process:
readlink /root/dir/dir_file</msg>
<msg timestamp="20200913 17:55:29.807" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20200913 17:55:29.808" level="INFO">Process completed.</msg>
<msg timestamp="20200913 17:55:29.808" level="INFO">${result} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20200913 17:55:29.802" endtime="20200913 17:55:29.808"></status>
</kw>
<kw name="Command Should Succeed" library="test">
<arguments>
<arg>${result}</arg>
</arguments>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${result.stderr}</arg>
</arguments>
<msg timestamp="20200913 17:55:29.811" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20200913 17:55:29.810" endtime="20200913 17:55:29.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${result.rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20200913 17:55:29.813" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200913 17:55:29.812" endtime="20200913 17:55:29.813"></status>
</kw>
<status status="PASS" starttime="20200913 17:55:29.809" endtime="20200913 17:55:29.814"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>${dest}</arg>
</arguments>
<status status="PASS" starttime="20200913 17:55:29.814" endtime="20200913 17:55:29.816"></status>
</kw>
<status status="PASS" starttime="20200913 17:55:29.799" endtime="20200913 17:55:29.816"></status>
</kw>
<status status="PASS" starttime="20200913 17:55:29.778" endtime="20200913 17:55:29.817" critical="yes"></status>
</test>
<status status="PASS" starttime="20200913 17:55:29.715" endtime="20200913 17:55:29.818"></status>
</suite>
<status status="PASS" starttime="20200913 17:55:29.711" endtime="20200913 17:55:29.821"></status>
</suite>
<status status="PASS" starttime="20200913 17:55:29.676" endtime="20200913 17:55:29.823"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Resources">Resources</stat>
<stat pass="1" fail="0" id="s1-s1" name="Package">Resources.Package</stat>
<stat pass="1" fail="0" id="s1-s1-s1" name="Setup">Resources.Package.Setup</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
